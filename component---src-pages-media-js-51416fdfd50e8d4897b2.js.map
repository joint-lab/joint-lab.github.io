{"version":3,"file":"component---src-pages-media-js-51416fdfd50e8d4897b2.js","mappings":"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","sources":["webpack://gatsby-boilerplate/./src/contexts/media.js","webpack://gatsby-boilerplate/./src/components/core/media.js","webpack://gatsby-boilerplate/./src/pages/media.js"],"sourcesContent":["import React from \"react\";\n\n// Hooks\nimport { useState, createContext, useMemo, useCallback } from 'react';\n\n// Utils\nimport { splitAuthors } from 'contexts/publications';\n\nfunction getUniqueTypes(media){\n  const types = media.map(d=>d.type);\n  return types.filter((val, index, self)=>self.indexOf(val)===index)\n}\n\nconst MediaContext = createContext({});\n\nconst MediaContextProvider = ({ children, people, media }) => {\n  const types = useMemo(()=>getUniqueTypes(media), [media]);\n  const processedMedia = useMemo(()=>splitAuthors(media, people), [media, people]);\n\n  const [filters, setFilters] = useState({authors: [], query: '', date: [0,9999], types: []});\n\n  const updateType = useCallback((type)=>{\n    const filteredTypes = filters.types.filter(a=>a!==type);\n    if (filteredTypes.length===filters.types.length){\n      // Add alias\n      setFilters({...filters, types:[...filters.types, type]});\n    }\n    else {\n      setFilters({...filters, types:filteredTypes});\n    }\n  }, [filters]);\n\n  const updateAuthors = useCallback((authorAlias)=>{\n    const filteredAuthors = filters.authors.filter(a=>a!==authorAlias);\n    if (filteredAuthors.length===filters.authors.length){\n      // Add alias\n      setFilters({...filters, authors:[...filters.authors, authorAlias]});\n    }\n    else {\n      setFilters({...filters, authors:filteredAuthors});\n    }\n  }, [filters]);\n\n  const updateYear = useCallback((date)=>{\n    setFilters({...filters, date});\n  }, [filters]);\n\n  const labMembers = useMemo(()=>people, [people]);\n\n  const filteredMedia = useMemo(()=>{\n    if (!processedMedia) return [];\n    return processedMedia.filter(d=>{\n      var _bool = true;\n      if (filters.types && filters.types.length>0){ _bool = _bool*(filters.types.includes(d.type))}\n      // Check the intersection between the authors and filters.authors\n      const authorsAliases = d.authors.map(d=>d.alias);\n      if (filters.authors && filters.authors.length>0){ _bool = _bool*(filters.authors.filter(a=> authorsAliases.includes(a)).length===filters.authors.length)}\n      if (filters.date){ _bool = _bool*(parseInt(d.year)>=filters.date[0])*(parseInt(d.year)<=filters.date[1])}\n      return _bool\n    }).sort((a,b)=>b.year-a.year);\n  }, [processedMedia, filters]);\n\n  return (\n    <MediaContext.Provider value={{ media:filteredMedia, unfilteredMedia: media, labMembers, types, updateType, updateAuthors, updateYear, filters }}>\n      {children}\n    </MediaContext.Provider>\n  );\n};\n\nexport { MediaContext, MediaContextProvider };","import React, { useContext, useMemo } from 'react';\nimport classnames from 'classnames';\n\n// Components\nimport { CheckboxList, RadioList } from 'components/core/forms';\nimport { Dropdown } from 'components/core/dropdown';\nimport { EmptyView } from 'components/core/empty_view';\nimport { FiArrowRight } from 'react-icons/fi';\nimport { useStaticQuery, graphql, Link } from 'gatsby';\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\n\n// Contexts\nimport { MediaContext } from 'contexts/media';\n\n// Utils\nimport { capitalizeFirstLetter } from 'utils/capitalize';\n\n/*\nMain view for media row.\n*/\nfunction Media({ title, description, year, authors, type, imageURL, youtubeID, url }){\n  const { updateAuthors, filters } = useContext(MediaContext);\n  const image = useMemo(()=>imageURL? getImage(imageURL): null, [imageURL]);\n  return <div className='py-12'>\n          <div className='flex'>\n            <div className={classnames(\"text-xs uppercase text-green-600\")}>{year} |</div>\n            <div className={classnames(\"ml-1 text-xs uppercase text-gray-600\")}>{type}</div>\n          </div>\n          <Link to={url}><h3 className='font-medium sm:text-2xl mt-2 hover:underline'>{title}</h3></Link>\n          {description?<p className=\"text-gray-600\">{description}</p>:null}\n          <div className='text-gray-600 mb-3'>\n            {authors.map((author, index)=>(<span key={author.alias}>\n              {author.isLabMember?\n                <Dropdown label={author.alias} vanilla className={filters.authors.includes(author.alias)? 'bg-green-50 text-uvm-green':'hover:bg-gray-100 text-green-600'}>\n                  <Dropdown.Item className={filters.authors.includes(author.alias)? 'text-red-600': ''} name={filters.authors.includes(author.alias)? 'Remove filter':'All medias'} onClick={()=>updateAuthors(author.alias)}/>\n                  <Dropdown.Item name='Profile' href={author.info.slug}/>\n                </Dropdown>\n               :\n                <span className={''}>{author.alias}</span>\n              }\n              <span className='mr-1'>{(index===authors.length-2)? ', and': ((index===authors.length-1)? '': ',')}</span></span>))}\n          </div>\n\n          {image?<Link to={url}><GatsbyImage image={image} alt={title} imgClassName=\"rounded-lg mb-2\"/></Link>:null}\n          {type===\"simplecast\"? <iframe title=\"simplecast\" height=\"200px\" width=\"100%\" frameborder=\"no\" scrolling=\"no\" seamless=\"\" src={url}/>:null}\n          {youtubeID? <div className=\"aspect-w-16 aspect-h-9\"><iframe className=\"w-full \" src={`https://www.youtube.com/embed/${youtubeID}`} title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen/></div>:null}\n         </div>\n}\n\n\n/*\nUncontrolled list of medias. The data comes from MediaContext.\n*/\nexport function MediasList({ emptyView, hideMediaCount }){\n  const { media } = useContext(MediaContext);\n  if (media.length===0){\n    if (emptyView){\n      return emptyView;\n    }\n    return <div className=\"border py-16 mb-8 \">\n            <EmptyView title='No media with these filters' description={'Remove some filters to get back results'}/>\n          </div>\n  }\n  return <div>\n          <div className='divide-y '>\n            {media.map(data=><Media key={data.id} {...data}/>)}\n          </div>\n          </div>\n}\n\n/*\n View to show the medias filters. The filter selection is passed to MediaContext.\n*/\nexport function MediaFilters(){\n  const { filters, updateType, updateYear, types, updateAuthors, labMembers } = useContext(MediaContext);\n\n    const { allMediaJson } = useStaticQuery(graphql`\n    query distinctMediaYears {\n      allMediaJson {\n        distinct(field: year)\n      }\n    }\n  `)\n\n  const yearOptions = useMemo(()=>{\n    if (!allMediaJson) return [];\n    return [\n             {\n              title: 'Any time',\n              onClick: ((e)=>updateYear([0, 9999], e.currentTarget.checked)),\n              checked: filters.date[0]===0,\n              readOnly: true\n            },\n            ...allMediaJson.distinct.sort((a,b)=>parseInt(b)-parseInt(a))\n            .map(d=>({title: d, onClick: (e=>updateYear([parseInt(d), parseInt(d)])), checked: parseInt(filters.date[0])===parseInt(d)}))]\n  }, [allMediaJson, updateYear, filters])\n\n\n  return <div className=''>\n          <div className='my-8 lg:my-0 lg:mb-8'>\n            <div className='mb-8'>\n              <CheckboxList title={'Types'} \n                          values={types.map(type=>({name: type,  readOnly:true, checked: filters.types.includes(type), title: capitalizeFirstLetter(type), onClick:((e)=>updateType(type))}))}/>\n            </div>\n            <div className=''>\n             <RadioList title={'Date'} \n                          numValuesShown={3}\n                          values={yearOptions}/>\n            </div>\n            <div className='pt-8'>\n              <CheckboxList title={'Active members'} \n                          values={labMembers.map(member=>({name: member.alias, readOnly: true, checked: filters.authors.includes(member.alias), title: member.alias, onClick:(()=>updateAuthors(member.alias))}))}/>\n            </div>\n          </div>\n         </div>\n}\n\n\n\nexport function ButtonToAllMedias({ page }){\n  return <Link to={'/medias'}><div className='flex items-center space-x-1 inline-flex text-uvm-green hover:opacity-80'><span>Explore more medias</span><FiArrowRight/></div></Link>\n}\n","import React, { useMemo, useState } from \"react\";\nimport { graphql } from \"gatsby\"\n\n// Components\nimport { Page, Container, ToolBar, TwoColumnLayout } from \"components/core/layout\";\nimport { SlideOver } from \"components/core/slide_over\";\nimport { MediasList, MediaFilters } from 'components/core/media';\nimport { FiMoreHorizontal } from 'react-icons/fi'; \nimport { SubHero } from 'components/core/sub-hero';\n\n// Contexts\nimport { MediaContextProvider } from 'contexts/media';\n\n/*\n URL: /publications \n Show a list of publications with filtering.\n It uses a context to handle the filtering. The data comes from the graphql query.\n*/\nexport default function Index({ data, location }){\n  const [open, setOpen] = useState(false);\n  const media = useMemo(()=>data.media.edges.map(d=>d.node), [data]);\n  const people = useMemo(()=>data.people.edges.map(n=>({...n.node.frontmatter, ...n.node.fields})), [data])\n\n  return  <MediaContextProvider media={media} people={people}>\n            <Page location={location} light >\n            <SubHero title=\"Media\"/>\n             <ToolBar className=\"block lg:hidden border-t bg-gray-100\">\n                  <div className=\"flex w-full\">\n                    <button onClick={()=>setOpen(true)} className=\"ml-auto rounded-md p-2 inline-flex items-center justify-center text-gray-800 hover:text-green-600 focus:outline-none focus:ring-2 focus-ring-inset focus:ring-white\">\n                      <span className=\"sr-only\">Open main menu</span>\n                      <FiMoreHorizontal className=\"h-6 w-6\" aria-hidden=\"true\"/>\n                    </button>\n                  </div>\n              </ToolBar>\n              <Container className=\"pt-8 lg:pt-16\">\n                <TwoColumnLayout >\n                <TwoColumnLayout.Secondary first className={'hidden lg:block w-full lg:w-72'}>\n                   <MediaFilters/>\n                </TwoColumnLayout.Secondary>\n                <TwoColumnLayout.Main last>\n                  <MediasList/>\n                </TwoColumnLayout.Main>\n                </TwoColumnLayout>\n              </Container>\n              <SlideOver open={open} setOpen={setOpen} size=\"sm\" title=\"Filters\">\n                <Container className=\"pb-4\">\n                  <MediaFilters/>\n                </Container>\n              </SlideOver>\n            </Page>\n          </MediaContextProvider>\n}\n  \nexport const IndexQuery = graphql`\n  query {\n    media: allMediaJson(\n      sort: {fields: year}\n    ) {\n      edges {\n        node {\n          id\n          url\n          authors\n          title\n          type\n          description,\n          year\n          youtubeID\n          imageURL {\n              childImageSharp {\n                gatsbyImageData(\n                  placeholder: DOMINANT_COLOR\n                  aspectRatio: 2\n                  transformOptions: {cropFocus: CENTER}\n                )\n              }\n            }\n        }\n      }\n    }\n    people: allMdx(\n        sort: {fields: frontmatter___lastName}\n        filter: {fields: {source: {eq: \"people\"}}}\n      ) {\n        edges {\n          node {\n            fields {\n              slug\n            }\n            frontmatter {\n              firstName\n              lastName\n              alias\n              group\n            }\n          }\n        }\n    }\n\n  }\n\n`;"],"names":["MediaContext","createContext","MediaContextProvider","children","people","media","types","useMemo","map","d","type","filter","val","index","self","indexOf","getUniqueTypes","processedMedia","splitAuthors","useState","authors","query","date","filters","setFilters","updateType","useCallback","filteredTypes","a","length","updateAuthors","authorAlias","filteredAuthors","updateYear","labMembers","filteredMedia","_bool","includes","authorsAliases","alias","parseInt","year","sort","b","Provider","value","unfilteredMedia","Media","title","description","imageURL","youtubeID","url","useContext","image","getImage","className","classnames","to","author","key","isLabMember","label","vanilla","name","onClick","href","info","slug","G","alt","imgClassName","height","width","frameborder","scrolling","seamless","src","allow","allowfullscreen","MediasList","emptyView","hideMediaCount","data","id","MediaFilters","allMediaJson","useStaticQuery","yearOptions","e","currentTarget","checked","readOnly","distinct","values","capitalizeFirstLetter","numValuesShown","member","Index","location","open","setOpen","edges","node","n","frontmatter","fields","light","first","last","size"],"sourceRoot":""}